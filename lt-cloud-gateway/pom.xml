<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.lt.cloud</groupId>
        <artifactId>lt-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <groupId>com.lt.cloud.gateway</groupId>
    <artifactId>lt-cloud-gateway</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>lt-cloud-gateway</name>
    <description>Demo project for Spring Boot</description>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>com.lt.cloud</groupId>
            <artifactId>lt-cloud-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-okhttp</artifactId>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.14.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
            <version>${nacos.version}</version>
        </dependency>
        <!--服务健康检查-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!--&lt;!&ndash; 加载破解版 aspose 本地jar&ndash;&gt;-->
        <!--<dependency>-->
            <!--<groupId>com.aspose</groupId>-->
            <!--<artifactId>aspose-words</artifactId>-->
            <!--<version>14.9.0</version>-->
            <!--<scope>system</scope>-->
            <!--<systemPath>${project.basedir}/lib/aspose-words-14.9.0-jdk16.jar</systemPath>-->
        <!--</dependency>-->
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <package.environment>dev</package.environment>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <package.environment>prod</package.environment>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <package.environment>test</package.environment>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <!-- 生成的jar中，不要包含pom.xml文件 -->
                        <addMavenDescriptor>false</addMavenDescriptor>
                    </archive>
                    <!--排除打的jar包中的配置文件-->
                    <excludes>
                        <exclude>*.yml</exclude>
                        <exclude>*.xml</exclude>
                        <exclude>template/**</exclude>
                        <exclude>mappers/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!--<plugin>-->
                <!--&lt;!&ndash;本地jar依赖拷贝&ndash;&gt;-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-dependency-plugin</artifactId>-->
                <!--<version>2.8</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>compile</phase>-->
                        <!--<goals>-->
                            <!--<goal>copy-dependencies</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<outputDirectory>${project.build.directory}/${project.artifactId}/lib</outputDirectory>-->
                            <!--<includeScope>system</includeScope>-->
                            <!--&lt;!&ndash; 间接依赖也拷贝 &ndash;&gt;-->
                            <!--<excludeTransitive>false</excludeTransitive>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>2.1.0</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>
                <!--lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来-->
                <configuration>
                    <repositoryLayout>flat</repositoryLayout>
                    <!--解决windows bat启动路径太长问题-->
                    <useWildcardClassPath>true</useWildcardClassPath>
                    <configurationDirectory>conf</configurationDirectory>
                    <configurationSourceDirectory>${project.build.outputDirectory}</configurationSourceDirectory>
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>
                    <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
                    <!--生成的项目的目录位置-->
                    <assembleDirectory>${project.build.directory}/${project.artifactId}</assembleDirectory>
                    <!--java启动参数 -Xms 程序初始化的时候内存栈的大小 -Xmx 应用程序(不是JVM)能够使用的最大内存数 -->
                    <extraJvmArguments>-Xms512m -Xmx1024m</extraJvmArguments>
                    <binFileExtensions>
                        <unix>.sh</unix>
                    </binFileExtensions>
                    <encoding>UTF-8</encoding>
                    <logsDirectory>logs</logsDirectory>
                    <platforms>
                        <platform>windows</platform>
                        <platform>unix</platform>
                    </platforms>
                    <!-- 打包的jar，以及maven依赖的jar放到这个目录里面 -->
                    <repositoryName>lib</repositoryName>
                    <programs>
                        <program>
                            <!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台-->
                            <mainClass>com.lt.cloud.gateway.LtCloudGatewayApplication</mainClass>
                            <!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
                            <name>start</name>
                        </program>
                    </programs>
                </configuration>
            </plugin>
            <!-- assembly用于上述制作出来的目录打包为压缩包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <!--jar包名字是否在finalName后追加AssemblyId-->
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <!--名字任意-->
                        <id>make-assembly</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
